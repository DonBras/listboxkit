// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var JestDom = require("bs-jest-dom/src/JestDom.bs.js");
var Listbox = require("../Listbox.bs.js");
var ReactTestingLibrary = require("bs-react-testing-library/src/ReactTestingLibrary.bs.js");

var options = [
  "Red",
  "Green",
  "Blue"
];

function ListboxTest$ListboxComponent(Props) {
  var match = Listbox.useListbox(options);
  var getOptionProps = match.getOptionProps;
  var highlightedIndex = match.highlightedIndex;
  return React.createElement("ul", undefined, $$Array.mapi((function (index, option) {
                    var match = Curry._1(getOptionProps, index);
                    return React.createElement("li", {
                                key: option,
                                "aria-selected": match.ariaSelected,
                                role: match.role,
                                tabIndex: match.tabIndex,
                                onKeyDown: match.onKeyDown,
                                onClick: match.onClick
                              }, highlightedIndex === index ? "* " + option : option);
                  }), options));
}

var ListboxComponent = {
  options: options,
  make: ListboxTest$ListboxComponent
};

var component = React.createElement(ListboxTest$ListboxComponent, {});

function getOption(name) {
  var partial_arg = {
    name: name
  };
  var partial_arg$1 = {
    NAME: "Str",
    VAL: "option"
  };
  return function (param) {
    return ReactTestingLibrary.getByRole(partial_arg$1, partial_arg, param);
  };
}

Jest.test("renders the option role for 'Red' ", (function (param) {
        return JestDom.toBeInTheDocument(expect(getOption("Red")(ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component))));
      }));

Jest.test("renders the option role for 'Green'", (function (param) {
        return JestDom.toBeInTheDocument(expect(getOption("Green")(ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component))));
      }));

Jest.test("renders the option role for 'Blue'", (function (param) {
        return JestDom.toBeInTheDocument(expect(getOption("Blue")(ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component))));
      }));

Jest.test("sets option aria-selected to true when clicked", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component);
        var arg = ReactTestingLibrary.FireEvent.click;
        Curry._2(arg, undefined, getOption("Red")(component$1));
        return JestDom.toHaveAttribute("aria-selected", "true")(expect(getOption("* Red")(component$1)));
      }));

Jest.test("highlights next option when pressing arrow down ", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component);
        var arg = ReactTestingLibrary.FireEvent.click;
        Curry._2(arg, undefined, getOption("Red")(component$1));
        Curry._2(ReactTestingLibrary.FireEvent.keyDown, {
              key: "ArrowDown",
              code: "ArrowDown"
            }, getOption("* Red")(component$1));
        return JestDom.toBeInTheDocument(expect(getOption("* Green")(component$1)));
      }));

Jest.test("highlights prev option when pressing arrow up ", (function (param) {
        var component$1 = ReactTestingLibrary.render(undefined, undefined, undefined, undefined, undefined, component);
        var arg = ReactTestingLibrary.FireEvent.click;
        Curry._2(arg, undefined, getOption("Red")(component$1));
        Curry._2(ReactTestingLibrary.FireEvent.keyDown, {
              key: "ArrowUp",
              code: "ArrowUp"
            }, getOption("* Red")(component$1));
        return JestDom.toBeInTheDocument(expect(getOption("* Blue")(component$1)));
      }));

exports.ListboxComponent = ListboxComponent;
exports.component = component;
exports.getOption = getOption;
/* component Not a pure module */
