// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");

function useDropdownSelect(labelId, options) {
  var size = options.length;
  var match = React.useState(function () {
        return false;
      });
  var setMenuOpen = match[1];
  var menuOpen = match[0];
  var match$1 = React.useState(function () {
        return -1;
      });
  var setHighlightedIndex = match$1[1];
  var highlightedIndex = match$1[0];
  var match$2 = React.useState(function () {
        return -1;
      });
  var setSelectedIndex = match$2[1];
  var selectedIndex = match$2[0];
  var showMenu = function (param) {
    return Curry._1(setMenuOpen, (function (param) {
                  return true;
                }));
  };
  var hideMenu = function (param) {
    return Curry._1(setMenuOpen, (function (param) {
                  return false;
                }));
  };
  var highlightNext = function (param) {
    return Curry._1(setHighlightedIndex, (function (index) {
                  if ((size - index | 0) === 1) {
                    return 0;
                  } else {
                    return index + 1 | 0;
                  }
                }));
  };
  var highlightPrev = function (param) {
    return Curry._1(setHighlightedIndex, (function (index) {
                  if (index === 0) {
                    return options.length - 1 | 0;
                  } else {
                    return index - 1 | 0;
                  }
                }));
  };
  var selectHighlighted = function (param) {
    return Curry._1(setSelectedIndex, (function (param) {
                  return highlightedIndex;
                }));
  };
  var highlightFirst = function (param) {
    return Curry._1(setHighlightedIndex, (function (param) {
                  return 0;
                }));
  };
  var highlightLast = function (param) {
    return Curry._1(setHighlightedIndex, (function (param) {
                  return size - 1 | 0;
                }));
  };
  var getLabelProps = function (param) {
    return {
            id: labelId
          };
  };
  var getToggleProps = function (param) {
    return {
            ariaLabelledby: labelId,
            tabIndex: 0,
            onClick: (function (param) {
                param.preventDefault();
                return Curry._1(showMenu, undefined);
              }),
            onKeyDown: (function (param) {
                param.preventDefault();
                var key = param.key;
                switch (key) {
                  case "ArrowDown" :
                      if (menuOpen) {
                        return Curry._1(highlightNext, undefined);
                      } else {
                        return Curry._1(showMenu, undefined);
                      }
                  case "ArrowUp" :
                      if (menuOpen) {
                        return Curry._1(highlightPrev, undefined);
                      } else {
                        return Curry._1(showMenu, undefined);
                      }
                  case "End" :
                      if (menuOpen) {
                        return Curry._1(highlightLast, undefined);
                      } else {
                        return ;
                      }
                  case " " :
                  case "Enter" :
                      break;
                  case "Escape" :
                      if (menuOpen) {
                        return Curry._1(hideMenu, undefined);
                      } else {
                        return ;
                      }
                  case "Home" :
                      if (menuOpen) {
                        return Curry._1(highlightFirst, undefined);
                      } else {
                        return ;
                      }
                  default:
                    return ;
                }
                if (menuOpen) {
                  Curry._1(selectHighlighted, undefined);
                  return Curry._1(hideMenu, undefined);
                } else {
                  return Curry._1(showMenu, undefined);
                }
              }),
            onBlur: (function (param) {
                param.preventDefault();
                return Curry._1(hideMenu, undefined);
              })
          };
  };
  var getMenuProps = function (param) {
    return {
            ariaLabelledby: labelId
          };
  };
  var getOptionProps = function (index) {
    return {
            role: "option",
            ariaSelected: index === selectedIndex,
            onClick: (function (_event) {
                return Curry._1(setSelectedIndex, (function (param) {
                              return index;
                            }));
              })
          };
  };
  return {
          selectedIndex: selectedIndex,
          highlightedIndex: highlightedIndex,
          menuOpen: menuOpen,
          getToggleProps: getToggleProps,
          getLabelProps: getLabelProps,
          getMenuProps: getMenuProps,
          getOptionProps: getOptionProps,
          showMenu: showMenu,
          hideMenu: hideMenu
        };
}

exports.useDropdownSelect = useDropdownSelect;
/* react Not a pure module */
