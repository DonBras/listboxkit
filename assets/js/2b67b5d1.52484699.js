"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[49],{573:function(t,e,n){var i=n(1386),o=n(7378),l=n(3893),r=["Red","Green","Blue"];var a=function(t){var e=t.multiSelect,n=void 0!==e&&e,a=l.useListbox(r,n,void 0),s=a.getOptionProps,d=a.highlightedIndex,u=i._1(a.getContainerProps,void 0),p=u.onKeyDown;return o.createElement("ul",{className:"listbox",role:u.role,tabIndex:u.tabIndex,onKeyDown:p,onFocus:u.onFocus,onBlur:u.onBlur},r.map((function(t,e){var n=i._1(s,e),l=["listbox-option",d===e?"highlighted":""].join(" ");return o.createElement("li",{key:t,"aria-selected":n["aria-selected"],className:l,role:n.role,onKeyDown:p,onClick:n.onClick},t)})))};e.S=a},2363:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return d},default:function(){return b},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var i=n(3117),o=n(102),l=(n(7378),n(3905)),r=n(573),a=["components"],s={id:"use_listbox",title:"useListbox",sidebar_label:"useListbox",slug:"/use_listbox"},d=void 0,u={unversionedId:"use_listbox",id:"use_listbox",title:"useListbox",description:"The useListbox hook provides the basic behaviours for implementing listbox components.",source:"@site/docs/use_listbox.mdx",sourceDirName:".",slug:"/use_listbox",permalink:"/listboxkit/docs/use_listbox",editUrl:"https://github.com/brnrdog/listbox/edit/master/docs/docs/use_listbox.mdx",tags:[],version:"current",frontMatter:{id:"use_listbox",title:"useListbox",sidebar_label:"useListbox",slug:"/use_listbox"},sidebar:"docs",previous:{title:"Getting started",permalink:"/listboxkit/docs/"},next:{title:"useDropdownListbox",permalink:"/listboxkit/docs/use_dropdown_listbox"}},p={},c=[{value:"Example",id:"example",level:3}],m={toc:c};function b(t){var e=t.components,n=(0,o.Z)(t,a);return(0,l.kt)("wrapper",(0,i.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The useListbox hook provides the basic behaviours for implementing listbox components."),(0,l.kt)("p",null,"Given a list of options, this hook returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"listbox")," record containing the listbox current state and functions to bind event handlers and aria attributes."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-res"},'  let options = ["Red", "Green", "Blue"]\n  let listbox = Listboxkit.useListbox(options, ~multiselect=true, ())\n')),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Properties"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"highlightedIndex"),(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"The current highlighted index, returns ",(0,l.kt)("inlineCode",{parentName:"td"},"-1")," when no option is highlighted.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"selectedIndex"),(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"The current selected index, returns ",(0,l.kt)("inlineCode",{parentName:"td"},"-1")," when no option is selected.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"selectedIndexes"),(0,l.kt)("td",{parentName:"tr",align:null},"array<int",">"),(0,l.kt)("td",{parentName:"tr",align:null},"The current selected indexes, in case is a ",(0,l.kt)("inlineCode",{parentName:"td"},"multiselect")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getContainerProps"),(0,l.kt)("td",{parentName:"tr",align:null},"unit => listboxContainerProps"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns a record containing the properties to be used in the container element.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getOptionProps"),(0,l.kt)("td",{parentName:"tr",align:null},"unit => listboxOptionProps"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns a record containing the properties to be used in the option elements.")))),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)(r.S,{mdxType:"Listbox"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rescript"},'let options = ["Red", "Green", "Blue"]\n\n@react.component\nlet make = () => {\n  let {highlightedIndex, getOptionProps, getContainerProps} = Listboxkit.useListbox(\n    options,\n    ~multiSelect=false,\n    (),\n  )\n\n  let {role, tabIndex, onKeyDown, onFocus, onBlur} = getContainerProps()\n  let listOption = (option, index) => {\n    let {ariaSelected, onClick, role} = getOptionProps(index)\n    let highlighted = highlightedIndex == index\n    let className = ["listbox-option", highlighted ? "highlighted" : ""]->Js.Array2.joinWith(" ")\n\n    <li className key=option onClick onKeyDown role ariaSelected> {option->React.string} </li>\n  }\n\n  <ul className="listbox" role tabIndex onKeyDown onFocus onBlur>\n    {options->Js.Array2.mapi(listOption)->React.array}\n  </ul>\n}\n\n')))}b.isMDXComponent=!0}}]);