"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[828],{4192:function(e,t,n){var o=n(1386),r=n(7378),i=n(1748),l=n(3893),a=["Red","Green","Blue"];var d=function(e){var t=l.useDropdownListbox(a,!1,void 0),n=t.getOptionProps,d=t.selectedIndex,s=t.highlightedIndex,p=o._1(t.getContainerProps,void 0),u=p.onKeyDown,c=o._1(t.getDropdownProps,void 0),m=-1===d?"Select a color":i.get(a,d);return r.createElement("div",void 0,r.createElement("div",{className:"dropdown-button",role:c.role,tabIndex:c.tabIndex,onKeyDown:c.onKeyDown,onBlur:c.onBlur,onClick:c.onClick},m,r.createElement("div",{className:"dropdown"},r.createElement("ul",{className:"listbox",hidden:!t.menuVisible,role:p.role,tabIndex:p.tabIndex,onKeyDown:u,onFocus:p.onFocus},a.map((function(e,t){var i=o._1(n,t),l=["listbox-option",s===t?"highlighted":""].join(" ");return r.createElement("li",{key:e,"aria-selected":i["aria-selected"],className:l,role:i.role,onKeyDown:u,onClick:i.onClick},e)}))))))};t.S=d},6485:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return b},frontMatter:function(){return d},metadata:function(){return p},toc:function(){return c}});var o=n(3117),r=n(102),i=(n(7378),n(3905)),l=n(4192),a=["components"],d={id:"use_dropdown_listbox",title:"useDropdownListbox",sidebar_label:"useDropdownListbox",slug:"/use_dropdown_listbox"},s=void 0,p={unversionedId:"use_dropdown_listbox",id:"use_dropdown_listbox",title:"useDropdownListbox",description:"The useDropdownListbox hook provides behaviours for implementing collapsible list boxes,",source:"@site/docs/use_dropdown_listbox.mdx",sourceDirName:".",slug:"/use_dropdown_listbox",permalink:"/listboxkit/docs/use_dropdown_listbox",editUrl:"https://github.com/brnrdog/listbox/edit/master/docs/docs/use_dropdown_listbox.mdx",tags:[],version:"current",frontMatter:{id:"use_dropdown_listbox",title:"useDropdownListbox",sidebar_label:"useDropdownListbox",slug:"/use_dropdown_listbox"},sidebar:"docs",previous:{title:"useListbox",permalink:"/listboxkit/docs/use_listbox"}},u={},c=[{value:"DropdownListbox properties",id:"dropdownlistbox-properties",level:3},{value:"Example",id:"example",level:3}],m={toc:c};function b(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The useDropdownListbox hook provides behaviours for implementing collapsible list boxes,\nlike dropdown select components."),(0,i.kt)("p",null,"Given a list of options, this hook returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"dropdownListbox")," record containing the dropdown listbox current state and functions to control the listbox visibility and to bind event handlers and aria attributes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-res"},'  let options = ["Red", "Green", "Blue"]\n  let dropdownListbox = Listboxkit.useDropdownListbox(options, ~multiselect=false, ())\n')),(0,i.kt)("h3",{id:"dropdownlistbox-properties"},"DropdownListbox properties"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Properties"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"highlightedIndex"),(0,i.kt)("td",{parentName:"tr",align:null},"int"),(0,i.kt)("td",{parentName:"tr",align:null},"The current highlighted index, returns ",(0,i.kt)("inlineCode",{parentName:"td"},"-1")," when no option is highlighted.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"menuVisible"),(0,i.kt)("td",{parentName:"tr",align:null},"bool"),(0,i.kt)("td",{parentName:"tr",align:null},"Indicates whether the list box with its options is visible")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"selectedIndex"),(0,i.kt)("td",{parentName:"tr",align:null},"int"),(0,i.kt)("td",{parentName:"tr",align:null},"The current selected index, returns ",(0,i.kt)("inlineCode",{parentName:"td"},"-1")," when no option is selected.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"selectedIndexes"),(0,i.kt)("td",{parentName:"tr",align:null},"array<int",">"),(0,i.kt)("td",{parentName:"tr",align:null},"The current selected indexes, in case is a ",(0,i.kt)("inlineCode",{parentName:"td"},"multiselect")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"getContainerProps"),(0,i.kt)("td",{parentName:"tr",align:null},"unit => listboxContainerProps"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a record containing the properties to be used in the container element.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"getDropdownProps"),(0,i.kt)("td",{parentName:"tr",align:null},"unit => dropdownProps"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a record containning the properties to be used in the dropdown element.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"getOptionProps"),(0,i.kt)("td",{parentName:"tr",align:null},"unit => listboxOptionProps"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a record containing the properties to be used in the option elements.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"hide"),(0,i.kt)("td",{parentName:"tr",align:null},"unit => unit"),(0,i.kt)("td",{parentName:"tr",align:null},"Hides the listbox element.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"show"),(0,i.kt)("td",{parentName:"tr",align:null},"unit => unit"),(0,i.kt)("td",{parentName:"tr",align:null},"Shows the listbox element.")))),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)(l.S,{mdxType:"DropdownSelect"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rescript"},'let options = ["Red", "Green", "Blue"]\n\n@react.component\nlet make = () => {\n  let {\n    highlightedIndex,\n    menuVisible,\n    selectedIndex,\n    getOptionProps,\n    getDropdownProps,\n    getContainerProps,\n  } = Listboxkit.useDropdownListbox(options, ~multiSelect=false, ())\n\n  let {role, tabIndex, onKeyDown, onFocus, onBlur} = getContainerProps()\n\n  let dropdownProps = getDropdownProps()\n  let selectedOption = selectedIndex === -1 ? "Select a color" : options[selectedIndex]\n\n  <div>\n    <div\n      role=dropdownProps.role\n      tabIndex=dropdownProps.tabIndex\n      onClick=dropdownProps.onClick\n      className="dropdown-button"\n      onKeyDown=dropdownProps.onKeyDown>\n      {selectedOption->React.string}\n      <div className="dropdown">\n        <ul className="listbox" role tabIndex onKeyDown onFocus onBlur hidden={!menuVisible}>\n          {options\n          ->Js.Array2.mapi((option, index) => {\n            let {ariaSelected, onClick, role} = getOptionProps(index)\n            let highlighted = highlightedIndex == index\n            let className =\n              ["listbox-option", highlighted ? "highlighted" : ""]->Js.Array2.joinWith(" ")\n\n            <li className key=option onClick onKeyDown role ariaSelected>\n              {option->React.string}\n            </li>\n          })\n          ->React.array}\n        </ul>\n      </div>\n    </div>\n  </div>\n}\n\n')))}b.isMDXComponent=!0}}]);